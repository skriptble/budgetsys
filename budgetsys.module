<?php
/**
 * @file 
 * The main module file for the Budget System.
 */
/******************************************************************
**********************Drupal Hooks********************************* 
*******************************************************************/
/**
 * Implements hook_entity_info().
 */
function budgetsys_entity_info() {
  $return = array(
    'budgetsys_line' => array(
      'label' => t('Budget System Line Item'),
      'plural label' => t('Budget System Line Items'),
      'description' => t('An entity type for line items which group budget values.'),
      'entity class' => 'BudgetsysLineClass',
      'controller class' => 'BudgetsysLineClassController',
      'base table' => 'budgetsys_line',
      'fieldable' => TRUE,
      'module' => 'budgetsys_line',
      'load hook' => 'budgetsys_line_load',
      'entity keys' => array(
        'id' => 'lid',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'static cache' => TRUE,
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'budgetsys_line_access',
    ),
  );

$return['budgetsys_line_type'] = array(
    'label' => t('Line Item Type'),
    'entity class' => 'LineItemType',
    'controller class' => 'LineItemTypeController',
    'base table' => 'budgetsys_line_type',
    'fieldable' => FALSE,
    'bundle of' => 'budgetsys_line',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'ltid',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'budgetsys_line',
    'access callback' => 'budgetsys_line_type_access',
    
  );
$return['budgetsys_org'] = array(
      'label' => t('Budget System Organization'),
      'plural label' => t('Budget System Organizations'),
      'description' => t('An entity type for organizations which group line items.'),
      'entity class' => 'BudgetsysOrgClass',
      'controller class' => 'BudgetsysOrgClassController',
      'base table' => 'budgetsys_org',
      'fieldable' => TRUE,
      'bundles' => array(),
      'entity keys' => array(
        'id' => 'oid',
      ),
      // Make use the class' label() and uri() implementation by default.
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'budgetsys_org',
    );  
  return $return;
}

/**
* Implements hook_entity_info_alter().
*/
function budgetsys_entity_info_alter(&$entity_info) {
  foreach (budgetsys_line_item_types() as $type => $info) {
    $entity_info['budgetsys_line']['bundles'][$type] = array(
      'label' => $info->label,
    );
  }
}
/**
 * Implements hook_entity_property_info_alter().
 */
function budgetsys_entity_property_info_alter(&$info) {
  $properties = &$info['budgetsys_line']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the budget line was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer budget line items',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the budget like was most recently updated."),
  );
  $properties['oid'] = array(
    'label' => t("Organization"),
    'type' => 'user',
    'description' => t("The organization of the budget line."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer budget line items',
    'required' => TRUE,
    'schema field' => 'oid',
  );
  $properties['account_number'] = array(
    'label' => t("Account Number"),
    'type' => 'varchar',
    'description' => t("The account number of the budget line."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer budget line items',
    'required' => TRUE,
    'schema field' => 'account_number',
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the budget line."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer budget line items',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties = &$info['budgetsys_org']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the budget line was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer budget organizations',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the budget like was most recently updated."),
  );
  $properties['active'] = array(
    'label' => t("Active"),
    'type' => 'integer',
    'description' => t("The status of the organization."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer budget organizations',
    'required' => TRUE,
    'schema field' => 'active',
  );
  $properties['budget_category'] = array(
    'label' => t("Budget Category"),
    'type' => 'text',
    'description' => t("The category this budget is in."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer budget organizations',
    'required' => TRUE,
    'schema field' => 'budget_category',
  ); 
}
/**
 * Implements hook_menu().
 */
function budgetsys_menu() {
  $items['budget/example'] = array(
    'title' => 'Exampe Page',
    'description' => 'An example page for testing.',
    'page callback' => 'budgetsys_example',
    'access arguments' => array('view content'),
    'type' => MENU_NORMAL_ITEM,  
  );
  $items['budget/full'] = array(
    'title' => 'Budget',
    'description' => 'The entire budget displayed by budget category',
    'page callback' => 'budgetsys_view_budget',
    'page arguments' => array(2,3),
    'access arguments' => array('view content'),
    'file' => 'budgetsys.pages.inc',
  );
  $items['budget/full/all-lines'] = array(
    'title' => 'All Lines',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('view content'),
  );
  $items['admin/config/system/budget_system'] = array(
    'title' => t('Budget System Configuration'),
    'description' => 'Configuration for the Budget System module',
    'page callback' => 'drupal_get_form',
    'page arguments' =>array('budget_value_configuration_form'),
    'access arguments' => array('administer budget system'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'budgetsys.settings.inc',
  );
  return $items;
}
/**
 * Adds the theme specifications to the Theme Registry
 */
function budgetsys_theme($existing, $type, $theme, $path) {
  return array(
    'budgetsys_full_budget' => array(
      'variables' => array('element' => null),
      'template' => 'budgetsys_full_budget',
      'path' => drupal_get_path('module','budgetsys') . '/templates',
    ),
  );
}
/**
* Implements hook_permission().
*/
function budgetsys_permission() {
  $permissions = array(
    'administer budget line items' => array(
      'title' => t('Administer budget line items'),
      'description' => t('Allows users to configure budget line item types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create budget line items' => array(
      'title' => t('Create budget line items'),
      'description' => t('Allows users to create budget line items.'),
      'restrict access' => TRUE,
    ),
    'view budget line items' => array(
      'title' => t('View budget line items'),
      'description' => t('Allows users to view budget line items.'),
      'restrict access' => TRUE,
    ),
    'edit any budget line items' => array(
      'title' => t('Edit any budget line items'),
      'description' => t('Allows users to edit any budget line items.'),
      'restrict access' => TRUE,
    ),
    'edit own budget line items' => array(
      'title' => t('Edit own budget line items'),
      'description' => t('Allows users to edit own budget line items.'),
      'restrict access' => TRUE,
    ),
    'administer budget organizations' => array(
      'title' => t('Administer budget organizations'),
      'description' => t('Allows users to configure budget line item types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create budget organizations' => array(
      'title' => t('Create budget organizations'),
      'description' => t('Allows users to create budget organizations.'),
      'restrict access' => TRUE,
    ),
    'view budget organizations' => array(
      'title' => t('View budget organizations'),
      'description' => t('Allows users to view budget organizations.'),
      'restrict access' => TRUE,
    ),
    'edit any budget organizations' => array(
      'title' => t('Edit any budget organizations'),
      'description' => t('Allows users to edit any budget organizations.'),
      'restrict access' => TRUE,
    ),
    'edit own budget organizations' => array(
      'title' => t('Edit own budget organizations'),
      'description' => t('Allows users to edit own budget organizations.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}
/**
 * Creates a new object from the specified class type.
 * 
 * @param $class_type
 * The Budget System API class you wish to call.
 * 
 * @return
 * An object of that class.
 */
function budgetsys_load_class($class_type) {
  $loaded_classes = &drupal_static(__FUNCTION__, array());
  if (!isset($loaded_classes[$class_type])) {
    $class_name = 'BudgetSystem';
    $class_name .= ucfirst($class_type);
    $class_name .= 'API';
    $loaded_classes[$class_type] = new $class_name();
  }
  return $loaded_classes[$class_type];
}

/******************************************************************
**********************Settings API********************************* 
*******************************************************************/
/**
 * Creates an array of budget_categories from the variable.
 * 
 * @return $budget_allowed_years
 * An array of allowed years from the budgetsys_allowed_fiscal_years
 * variable.
 */
function budgetsys_load_years() {
  return budgetsys_load_class('settings')->loadYears();
}
/**
 * Generates a list of allowed years. Both the index
 * and the values are the translated allowed years.
 * 
 * @return $list
 * An array of allowed years, keyed by the allowed years.
 * 
 */
function budgetsys_load_years_list() {
  return budgetsys_load_class('settings')->loadYears(TRUE);
}
/**
 * Generates an array of fiscal years.
 * 
 * @param $current_year
 *  The current year, formatted as either a 2 year 9 digit definition or a 1 year 4 digit definition
 * 
 * @param $num_years
 *  The number of years to return
 * 
 * @return
 *  An array consisting of the number of years specified starting from, but not including,
 * $current_year
 */
function budgetsys_generate_prior_years($current_year = NULL, $num_years = NULL, $reversed = NULL) {
   return budgetsys_load_class('settings')->generatePriorYears($current_year, $num_years, $reversed);    
}

/******************************************************************
**********************Formatting API******************************* 
*******************************************************************/
/**
 * A simple function to properly format currency.
 * 
 * @param $value
 *  The value to be formatted as currency.
 * 
 * @return
 *  The formatted currency.
 */
function budget_value_format_currency($value) {
  return budgetsys_load_class('formatting')->formatCurrency($value);
}
/**
 * function to create a link render item. Returns the render array.
 * 
 * @param $text
 *  The text of the link
 * 
 * @param $path
 *  The path the link leads to
 * 
 * @return
 *  see above
 */
function budgetsys_create_link($text, $path) {
  return budgetsys_load_class('formatting')->createLink($text, $path);
}
/******************************************************************
**********************Line Item API******************************** 
*******************************************************************/
/**
 * Loads the LIDs of all the budget lines in the database
 * 
 * @return
 *  An array of all the LIDs in the system
 */
function budgetsys_line_load_all_lids() {
  return budgetsys_load_class('line')->loadAllLineIDs();
}
/*******************************************************************************
 ****************************** Budget Line API's ******************************
 ******************************************************************************/
/**
* Access callback for Budget Line.
*/
function budgetsys_line_access($op, $budget_line, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer budget line items', $account)
          || user_access('create budget line items', $account);
    case 'view':
      return user_access('administer budget line items', $account)
          || user_access('view budget line items', $account);
    case 'edit':
      return user_access('administer budget line items')
          || user_access('edit any budget line items')
          || (user_access('edit own budget line items') && ($budget_line->uid == $account->uid));
  }
}

/**
 * Load a budget line item.
 */
function budgetsys_line_load($lid, $reset = FALSE) {
  $budget_line = budgetsys_line_load_multiple(array($lid), array(), $reset);
  return reset($budget_line);
}

/**
 * Load multiple line items based on certain conditions.
 */
function budgetsys_line_load_multiple($lids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('budgetsys_line', $lids, $conditions, $reset);
}

/**
 * Save budget line.
 */
function budgetsys_line_save($line_item) {
  entity_save('budgetsys_line', $line_item);
}

/**
 * Delete single budget line.
 */
function budgetsys_line_delete($line_item) {
  entity_delete('budgetsys_line', entity_id('budgetsys_line' ,$line_item));
}

/**
 * Delete multiple budget lines.
 */
function budgetsys_line_delete_multiple($line_ids) {
  entity_delete_multiple('budgetsys_line', $line_ids);
}

/**
 * Query the database for the value_type of a specific account.
 */
function budgetsys_line_value_type($account) {
  return entity_get_controller('budgetsys_line')->queryValueType($account);
}

/*******************************************************************************
 ****************************** Budget Line Type API's *************************
 ******************************************************************************/

/**
 * Access callback for Line Type.
 */
function budgetsys_line_type_access($op, $entity = NULL) {
  return user_access('administer budget line items');
}

/**
 * Load Line Type.
 */
function budgetsys_line_type_load($line_item_type) {
  return budgetsys_line_item_types($line_item_type);
}

/**
 * List of budget line types.
 */
function budgetsys_line_item_types($line_item_name = NULL) {
  $types = entity_load_multiple_by_name('budgetsys_line_type', isset($line_item_name) ? array($line_item_name) : FALSE);
  return isset($line_item_name) ? reset($types) : $types;
}

/**
 * Save budget line type entity.
 */
function budgetsys_line_type_save($line_item_type) {
  entity_save('budgetsys_line_type', $line_item_type);
}

/**
 * Delete single budget line type.
 */
function budgetsys_line_type_delete($line_item_type) {
  entity_delete('budgetsys_line_type', entity_id('budgetsys_line_type' ,$line_item_type));
}

/**
 * Delete multiple line types.
 */
function budgetsys_line_type_delete_multiple($line_item_type_ids) {
  entity_delete_multiple('budgetsys_line_type', $line_item_type_ids);
}


/******************************************************************
**********************Budget Value API*****************************
*******************************************************************/

/******************************************************************
**********************Organization API*****************************
*******************************************************************/
/**
 * @return $budget_categories
 * An array of budget categories from the budgetsys_org_budget_categories
 * variable.
 * 
 * Creates an array of budget_categories from the variable.
 */
function budgetsys_org_load_budget_categories() {
  return budgetsys_load_class('org')->loadBudgetCategories();
}
/**
 * @return $list
 * An array of budget categories, keyed by the category name
 * 
 * Generates a list of budget categories. Both the index
 * and the values are the translated budget category
 */
function budgetsys_org_list_budget_categories() {
  return budgetsys_load_class('org')->listBudgetCategories();
}
/**
 * Loads a list of organizations into an array.
 * 
 * The each item in the array keyed by the oid.
 * 
 * @param $budget_category
 *  An optional category that will limit the results to organizations
 * only of that category.
 * 
 * @return
 *  An array of the organizations and oids keyed by the oid.
 */
function budgetsys_org_load_budget_orgs($budget_category = NULL) {
  return budgetsys_load_class('org')->loadBudgetOrgs($budget_category);
}
/**
 * Loads a list of organizations as an array with a key of the oid 
 * and a value of the organization's title organized by the budget
 * category.
 * 
 * @return
 *  An multidimensional array. The first dimension contains the budget
 * categories. The second dimension contains the oids of the organization.
 * The value of each item is the title of the organization
 */
function budgetsys_org_load_organizations_by_category() {
  return budgetsys_load_class('org')->loadOrganizationsByCategory();
}
/**
 * Returns a multi-dimensional array. The first level is a list of budget categories
 * which. The second level are the actual selectable organizations.
 * 
 * @return
 *  An multi-dimensional array of organizations
 */
function budgetsys_org_organization_select_list() {
 return budgetsys_load_class('org')->organizationSelectList();
}

function budgetsys_org_load_org_budget_lines($oid) { 
 return budgetsys_load_class('org')->loadOrgBudgetLines($oid);  
}
/**
 * Loads a list of organization ids.
 * 
 * @param $budget_category
 *  An optional category that will limit the results to organizations
 * only of that category.
 * 
 * @return
 *  An array of the organization ids (oids).
 */
function budgetsys_org_load_oids($budget_category = NULL) {
 return budgetsys_load_class('org')->loadOids($budget_category); 
}

function budgetsys_org_page_title($budget_org) {
  return $budget_org->title;
}
/**
 * Returns an initialized budget organizations object.
 *
 * @param $type
 *   The machine-readable type of the organization.
 *
 * @return
 *   An organization object with all default fields initialized.
 */
function budgetsys_org_new($type = '') {
  return entity_get_controller('budgetsys_org')->create();
}

function budgetsys_org_save($budget_org) {
  return entity_get_controller('budgetsys_org')->save($budget_org);
}

function budgetsys_org_load_multiple($oids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('budgetsys_org', $oids, $conditions, $reset);
}

function budgetsys_org_load($oid = NULL, $vid = NULL, $reset = FALSE) {
    $oids = (isset($oid) ? array($oid) : array());
    $conditions = (isset($vid) ? array('vid' => $vid) : array());
    $budget_org = budgetsys_org_load_multiple($oids, $conditions, $reset);
    return $budget_org ? reset($budget_org) : FALSE;
}

function budgetsys_org_load_ids_by_cat($category) {
  return entity_get_controller('budgetsys_org')->loadOrgIdByCategory($category);
}
function budgetsys_org_delete($oid) {
    return budgetsys_org_delete_multiple(array($oid));
}
function budgetsys_org_delete_multiple($oids) {
    return entity_get_controller('budgetsys_org')->delete($oids);
}
/**
 * Loads a list of all the accoutns for the specified organization
 */
function budgetsys_org_load_accounts($oid) {
  return budgetsys_load_class('org')->loadOrgAccounts($oid);
}
/**
 * Calculates the total for an organization.
 * If you need to calculate the total for a series of accounts use the budgetsys_value_calculate_total function.
 * 
 * @param $organization
 * The organization object to use for this calculation. Must contain the oid.
 * 
 * @param $year
 * The year for which you want to calcuate this total.
 * 
 * @param $type
 * The account type you want to calculate this total for.
 *  
 * @return 
 * The organization's budget total for the specified year and budget value type.
 */
function budgetsys_org_calculate_total($organization, $year, $type) {
  $accounts = budgetsys_org_load_accounts($organization->oid);
  $total = 0; 
  print_r($accounts); 
  foreach($accounts as $account) {
    $budget_value = budgetsys_value_load_budget_value($account, $year, $type);
    $value = $budget_value['value'];
    $total += $value;
  }
  return $total;
}

/**
 * Saves the total for an organization's budget.
 */
function budgetsys_org_save_total ($total) {
  $previous_total = budgetsys_org_load_total($total);
  $is_new = TRUE;
  if($previous_total['tid']) {
     $is_new = FALSE;
     $tid = $previous_total['tid'];
     $total['tid'] = $tid;
    }
  if($is_new == TRUE) {
    drupal_write_record('budgetsys_total', $total);
    return drupal_set_message('The budget total has been successfully created!', 'status');
  } else {
    drupal_write_record('budgetsys_total', $total, 'tid');

    return drupal_set_message('The budget total has been successfully updated!', 'status');
  }
}
/**
 * Calculates and saves an organization's budget total
 * 
 * @param $organization
 * The organization object to use for this calculation. Must contain the oid.
 * 
 * @param $year
 * The year for which you want to calcuate this total.
 * 
 * @param $type
 * The account type you want to calculate this total for.
 *  
 * @return 
 * A status message using drupal_set_message.
 */
function budgetsys_org_total($organization, $year, $type) {
  $calculated_total = budgetsys_org_calculate_total($organization, $year, $type);
  drupal_set_message('The organization total has been calculated', 'status');
  $save_total = array();
  $save_total['year'] = $year;
  $save_total['type'] = $type;
  $save_total['value'] = $calculated_total;
  $save_total['oid'] = $organization->oid;
  budgetsys_org_save_total($save_total);

  return(drupal_set_message('Total calculation and saving complete'));
}

/**
 * Loads a total for an organization's budget.
 */
function budgetsys_org_load_total($total) {
    $oid = $total['oid'];
    $year = $total['year'];
    $type = $total['type'];
   // Select the total id and year from the budget total table where oid = $oid AND year = $year AND type = $type
    $query = db_query("SELECT t.tid, t.value FROM {budgetsys_total} t WHERE oid = :oid AND year = :year AND type = :type", array(
      ':oid' => $oid,
      ':year' => $year,
      ':type' => $type,
    ));
     $result = $query->fetchAssoc(); 
     return $result;    
}


function budgetsys_example() {
  $org = budgetsys_org_load('1');
  $year = '2009-2010';
  $type = 'approved';
  $og_total = budgetsys_org_calculate_total($org, $year, $type);
  print $og_total;
  print '<br>';
  $total = array();
  $total['year'] = $year;
  $total['type'] = $type;
  $total['value'] = $og_total;
  $total['oid'] = $org->oid;
  print $org->oid;
  budgetsys_org_save_total($total);
  $totalArray = array();
  $totalArray['oid'] = '1';
  $totalArray['year'] = $year;
  $totalArray['type'] = $type;
  $loadedTotal = budgetsys_org_load_total($totalArray);
  drupal_set_message('The loaded total is: '. $loadedTotal['value'], 'status');
  budgetsys_org_total($org, '2010-2011', 'approved');
    
  $line = budgetsys_load_class('line');   
  $methods = get_class_methods($line);
  foreach ($methods as $method_name) {
    echo "$method_name\n";
}
  //var_dump(get_object_vars($line));
  $years = $line->settingsAPI->loadYears();
  print_r($years);
  print 'HELLO!';
  return '';
  
}

/**
 * Takes an account number and optionally a set of years and returns an array.
 * This array contains the budget values, if they exist for the accounts for
 * the specified years. If the user can edit the budget values it returns them
 * as a link to the edit page.
 * 
 * @param $account
 *  The account number that needs to be displayed
 * 
 * @param $years
 *  An optional array of fiscal years
 * 
 * @return
 *  An array of budget values 
 */
function budgetsys_load_budget_line_item($account, $years = NULL) {
  module_load_include('inc', 'budgetsys_line', 'budgetsys_line.api'); 
   if($years == NULL) {
      $years = budgetsys_generate_prior_years(NULL, NULL, TRUE);                // Gets the prior years to be displayed
    }
  foreach($years as $year) {    
    $temp_line = budgetsys_line_load_bv($account, $year);                   // Loads the budget value
    if($temp_line['bvid'] && user_access('edit budget values')) {           // If the budget value exists and the user can edit budget values
      $formatted_line = budget_value_format_currency($temp_line['value']);  // format this number as a link to the edit page
      $path = 'budget/value/'. $temp_line['bvid'] . '/edit';
      $line_item[] = budgetsys_create_link($formatted_line, $path); 
    }
    else {
       $line_item[] = budget_value_format_currency($temp_line['value']); // If the user cannot edit budget values or this budget value
     }                                                                             // doesn't exist format it as a regular value
  }
  return $line_item;
}

/**
 * Loads all of the line items for a particular organizations. Returns an array with the
 * following items:
 * --title
 * --account number
 * --line item type
 * --values
 * for each line
 * 
 * @param $budget_org
 *  The organization object containing at least an oid property
 * 
 * @return
 * An array of the content.
 */
function budgetsys_load_complete_organization_budget($budget_org) {
  module_load_include('inc', 'budgetsys_org', 'budgetsys_org.api');
  $accounts = budgetsys_org_load_org_budget_lines($budget_org->oid);
  $budget_org->content['org_title'] = $budget_org->title;
  $delta = 0;
  foreach($accounts as $account) {
    $budget_org->content['title'][$delta] = $account->title;                       // Sets the title
    $budget_org->content['account_number'][$delta] = $account->account_number;     // Sets the account number
    $budget_org->content['line_item_type'][$delta] = $account->type; 
    $budget_org->content['values'][$delta] = budgetsys_value_load_budget_line_item($account->account_number);
    $delta++;
  }
  
  $total_accounts = budgetsys_org_load_accounts($budget_org->oid);
  $years = budgetsys_generate_prior_years(NULL, NULL, TRUE);                // Gets the prior years to be displayed
  $total = array();
     $main_type = variable_get('budgetsys_value_final_type');
     if($main_type == NULL) {
       return drupal_set_message("The Final Budget Value Type has not been set. Please set it in the configuration form for the Budget System Value module.");
     }
    $types_raw = budgetsys_value_types();
    $types = array();
    foreach($types_raw as $type) {
      $types[] = $type->type;
    }
     $main_type_key = array_search($main_type, $types);
     unset($types[$main_type_key]);
     
  foreach($years as $year) {
    $budget_load_total = array('oid' => $budget_org->oid, 'year' => $year, 'type' => $main_type);
    $loaded_total = budgetsys_org_load_total($budget_load_total); 
    if($loaded_total['value']) {
      $total[] = budget_value_format_currency($loaded_total['value']); 
    } else {
        $total[] = budget_value_format_currency(budgetsys_value_calculate_total($total_accounts, $main_type, $year));
    }
  }
  foreach($types as $type) {
    $budget_load_total = array('oid' => $budget_org->oid, 'year' => $year, 'type' => $type);
    $loaded_total = budgetsys_org_load_total($budget_load_total); 
    if($loaded_total['value']) {
      $total[] = budget_value_format_currency($loaded_total['value']); 
    } else {
      $total[] = budget_value_format_currency(budgetsys_value_calculate_total($total_accounts, $type, $year));
    }
  }
    $budget_org->content['title'][$delta] = '';                       // Sets the title
    $budget_org->content['account_number'][$delta] = '';     // Sets the account number
    $budget_org->content['line_item_type'][$delta] = ''; 
    $budget_org->content['values'][$delta] = array('','','','','','','');
    $delta++;  
    $budget_org->content['title'][$delta] = '<strong>Total</strong>';                       // Sets the title
    $budget_org->content['account_number'][$delta] = '';     // Sets the account number
    $budget_org->content['line_item_type'][$delta] = ''; 
    $budget_org->content['values'][$delta] = $total;
    $delta++;
  
     $budget_org->content['delta'] = $delta;
     $budget_org->content['num_years'] = variable_get('budgetsys_line_num_prior_years', '3');   // Provides the number of prior years to display
     $years = budgetsys_generate_prior_years(NULL, NULL, TRUE);
     $types = budgetsys_value_types_extra();
     $budget_org->content['headers'] = array_merge($years, $types);
  return $budget_org->content;
}

/**
 * Builds a content array from the line item given. Returns an item ready to be sent to a page template.
 * 
 * @param $line_item
 *  A line item object
 * 
 * @return
 *  A page template ready array.
 * 
 */
function budgetsys_load_complete_budget_line_items($line_item) {
    module_load_include('inc', 'budgetsys_line', 'budgetsys_line.api');       // Provides functions
    $line_item->content['title'] = $line_item->title;                       // Sets the title
    $line_item->content['account_number'] = $line_item->account_number;     // Sets the account number
    $line_item->content['line_item_type'] = $line_item->type;               // Sets the line item type
     if(module_exists('budgetsys_org')) {
        $organization = budgetsys_org_load($line_item->oid);                // load the budget organization
        $org_path = 'budget/org/' . $organization->oid;                      
        $line_item->content['organization'] = $organization->title;         // Set the organization title
       if(user_access('view budget organizations')) {                       // If the user can view budget organization reformat the organization
           $line_item->content['organization'] = budgetsys_create_link($organization->title, $org_path); // As a link
       }
     }       
  $account = $line_item->account_number;
  $line_item->content['values'] = budgetsys_value_load_budget_line_item($account);
  $line_item->content['num_years'] = variable_get('budgetsys_line_num_prior_years', '3');   // Provides the number of prior years to display

  
  return $line_item->content; 
}
